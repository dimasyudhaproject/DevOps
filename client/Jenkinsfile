/*
TO-DO LISTS
 1. Add info in each stage
 2. How if branch contains numbers?
 3. Make sure that build folder & nginx.conf file are set in the exact folder
 4. Double check path to call nginx.conf in Dockerfile & nginx.conf itself
*/

pipeline {
    agent any
    tools {
        nodejs('nodejs-16')
    }
    environment {
        BRANCH_NAME = "${params.BRANCH}"
        VM_IP = "${BRANCH_NAME == 'sit' ?  '58.236.169.3' : BRANCH_NAME == 'uat' ? '154.226.218.75' : BRANCH_NAME == 'prod' ? '196.172.27.77' : '123.163.194.154'}"
        VM_PORT = "${BRANCH_NAME == 'sit' ? '58' : BRANCH_NAME == 'uat' ? '154' : BRANCH_NAME == 'prod' ? '196' : '123'}"
        VM_USER = "${BRANCH_NAME == 'sit' ? 'dimas' : BRANCH_NAME == 'uat' ? 'yudha' : BRANCH_NAME == 'prod' ? 'pratama' : 'root'}"
        VM_ROOT_PATH = "${VM_USER == 'root' ? '/root' : `/home/${VM_USER}`}"
        VM_PASS = credentials('vm-pass')
        BOT_TOKEN = credentials('bot-token')
        GROUP_ID = credentials('group-id')
        APP_VERSION = "${sh(script: 'jq -r .version package.json', returnStdout: true).trim()}"
    }
    parameters {
        gitParameter branchFilter: 'origin/(.*)', defaultValue: 'dev', name: 'BRANCH', type: 'PT_BRANCH'
    }
    stages {
        stage('Variables for Telegram') {
            steps {
                script {
                    BOT_TOKEN = "${BOT_TOKEN}"
                    GROUP_ID = "${GROUP_ID}"
                    TOOK = ""
                    USER = "${currentBuild.getBuildCauses('hudson.model.Cause$UserIdCause')[0]['userId']}"
                    JOB = "${currentBuild.projectName}"
                    ENV = "${BRANCH_NAME}"
                    CONSOLE = "${BUILD_URL}/console"
                }
            }
        }
        stage('Initialize Directory') {
            steps {
                sh """
                    sshpass -p '${VM_PASS}' ssh -o StrictHostKeyChecking=no ${VM_USER}@${VM_IP} -p ${VM_PORT} mkdir -p ${VM_ROOT_PATH}/mern
                    sshpass -p '${VM_PASS}' ssh -o StrictHostKeyChecking=no ${VM_USER}@${VM_IP} -p ${VM_PORT} mkdir -p ${VM_ROOT_PATH}/mern/client
                """
            }
        }
        stage('Set Environment') {
            steps {
                sh """
                    cp -rf .env.${BRANCH_NAME} .env
                    sshpass -p '${VM_PASS}' scp -P ${VM_PORT} .env ${VM_USER}@${VM_IP}:${VM_ROOT_PATH}/mern/client
                """
            }
        }
        stage('Docker Build') {
            steps {
                script {
                    if (BRANCH_NAME == 'dev' || BRANCH_NAME == 'sit') {
                        sh "docker build --target node --build-arg ENV=${BRANCH_NAME} -t dimasyudha/mern-client-${BRANCH_NAME}:${APP_VERSION} ."
                    } else {
                        sh "docker build --target nginx --build-arg ENV=${BRANCH_NAME} -t dimasyudha/mern-client-${BRANCH_NAME}:${APP_VERSION} ."
                    }
                }
            }
        }
        stage('Login to Docker Hub') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker-creds', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh """
                        sshpass -p '${VM_PASS}' ssh -o StrictHostKeyChecking=no ${VM_USER}@${VM_IP} -p ${VM_PORT} docker login -u ${DOCKER_USER} -p ${DOCKER_PASS}
                        docker login -u ${NEXUS_USER} -p ${NEXUS_PASS}
                    """
                }
            }
        }
        stage('Push Docker Image') {
            steps {
                sh "docker push dimasyudha/mern-client-${BRANCH_NAME}:${APP_VERSION}"
            }
        }
        stage('Docker Compose') {
            steps {
                sh """
                    sshpass -p '${VM_PASS}' scp -P ${VM_PORT} client/docker-compose.yml ${VM_USER}@${VM_IP}:${VM_ROOT_PATH}/mern/client
                    sshpass -p '${VM_PASS}' ssh -o StrictHostKeyChecking=no ${VM_USER}@${VM_IP} -p ${VM_PORT} docker-compose -f ${VM_ROOT_PATH}/mern/client/docker-compose.yml down
                    sshpass -p '${VM_PASS}' ssh -o StrictHostKeyChecking=no ${VM_USER}@${VM_IP} -p ${VM_PORT} docker-compose -f ${VM_ROOT_PATH}/mern/client/docker-compose.yml pull
                    sshpass -p '${VM_PASS}' ssh -o StrictHostKeyChecking=no ${VM_USER}@${VM_IP} -p ${VM_PORT} docker-compose -f ${VM_ROOT_PATH}/mern/client/docker-compose.yml up -d
                """
            }
        }
    }
    post {
        always {
            cleanWs()
            dir("${env.WORKSPACE}@tmp") {
                deleteDir()
            }
            dir("${env.WORKSPACE}@script") {
                deleteDir()
            }
            dir("${env.WORKSPACE}@script@tmp") {
                deleteDir()
            }
            sh """
                docker image prune -f
                sshpass -p '${VM_PASS}' ssh -o StrictHostKeyChecking=no ${VM_USER}@${VM_IP} -p ${VM_PORT} docker image prune -f
            """
        }
        success {
            sh "curl -s -X POST https://api.telegram.org/bot${BOT_TOKEN}/sendMessage -d chat_id=${GROUP_ID} -d 'parse_mode=HTML' -d text='Result: Success\nTook: ${TOOK}\nUser: ${USER}\nJob: ${JOB}\nEnv: ${ENV}\nConsole: ${CONSOLE}'"
        }
         failure {
            sh "curl -s -X POST https://api.telegram.org/bot${BOT_TOKEN}/sendMessage -d chat_id=${GROUP_ID} -d 'parse_mode=HTML' -d text='Result: Failure\nTook: ${TOOK}\nUser: ${USER}\nJob: ${JOB}\nEnv: ${ENV}\nConsole: ${CONSOLE}'"
        }
    }
}
