/*
TO-DO LISTS
 1. Add info in each stage
 2. Find flag to remove Docker image either it exists or not
 3. How if branch contains numbers?
*/

pipeline {
    agent any
    tools {
        nodejs('nodejs-16')
    }
    environment {
        GIT_BRANCH = "${params.BRANCH}"
        VM_IP = "${GIT_BRANCH == 'dev' ? '123.163.194.154' : GIT_BRANCH == 'sit' ?  '58.236.169.3' : GIT_BRANCH == 'uat' ? '154.226.218.75' : GIT_BRANCH == 'prod' && '196.172.27.77'}"
        VM_PORT = "${GIT_BRANCH == 'dev' ? '123' : GIT_BRANCH == 'sit' ? '58' : GIT_BRANCH == 'uat' ? '154' : GIT_BRANCH == 'prod' && '196'}"
        VM_USER = "${GIT_BRANCH == 'dev' ? 'dimas' : GIT_BRANCH == 'sit' ? 'yudha' : GIT_BRANCH == 'uat' ? 'pratama' : GIT_BRANCH == 'prod' && 'dimasyudha'}"
        VM_PASS = credentials('vm-pass')
        BOT_TOKEN = credentials('bot-token')
        GROUP_ID = credentials('group-id')
    }
    parameters {
        gitParameter branchFilter: 'origin/(.*)', defaultValue: 'dev', name: 'BRANCH', type: 'PT_BRANCH'
    }
    stages {
        stage('Initialize Directory') {
            steps {
                sh """
                    sshpass -p '${VM_PASS}' ssh -o StrictHostKeyChecking=no ${VM_USER}@${VM_IP} -p ${VM_PORT} mkdir -p /home/dimasyudha/mern
                    sshpass -p '${VM_PASS}' ssh -o StrictHostKeyChecking=no ${VM_USER}@${VM_IP} -p ${VM_PORT} mkdir -p /home/dimasyudha/mern/service
                """
            }
        }
        stage('NPM Install') {
            steps {
                sh 'npm i'
            }
        }
        stage('Set Environment') {
            steps {
                sh """
                    cp -rf .env.${GIT_BRANCH} .env
                    sshpass -p '${VM_PASS}' scp -P ${VM_PORT} .env ${VM_USER}@${VM_IP}:/home/dimasyudha/mern/service
                """
            }
        }
        stage('Docker Build') {
            steps {
                sh "docker build -t dimasyudha.com/mern-service-${GIT_BRANCH} ."
            }
        }
        stage('Push to Nexus') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'nexus-credentials', usernameVariable: 'NEXUS_USER', passwordVariable: 'NEXUS_PASS')]) {
                    sh """
                        docker login -u ${NEXUS_USER} -p ${NEXUS_PASS} dimasyudha.com
                        docker push dimasyudha.com/mern-service-${GIT_BRANCH}
                    """
                }
            }
        }
        stage('Docker Compose') {
            steps {
                sh """
                    sshpass -p '${VM_PASS}' scp -P ${VM_PORT} service/docker-compose.yml ${VM_USER}@${VM_IP}:/home/dimasyudha/mern/service
                    sshpass -p '${VM_PASS}' ssh -o StrictHostKeyChecking=no ${VM_USER}@${VM_IP} -p ${VM_PORT} docker-compose -f /home/dimasyudha/mern/service/docker-compose.yml down
                    sshpass -p '${VM_PASS}' ssh -o StrictHostKeyChecking=no ${VM_USER}@${VM_IP} -p ${VM_PORT} docker-compose -f /home/dimasyudha/mern/service/docker-compose.yml pull
                    sshpass -p '${VM_PASS}' ssh -o StrictHostKeyChecking=no ${VM_USER}@${VM_IP} -p ${VM_PORT} docker-compose -f /home/dimasyudha/mern/service/docker-compose.yml up -d
                """
            }
        }
        stage('Save Variable Value') {
            steps {
                script {
                    BOT_TOKEN = "${BOT_TOKEN}"
                    GROUP_ID = "${GROUP_ID}"
                }
            }
        }
    }
    post {
        always {
            sh """
                docker image rm dimasyudha.com/mern-service-${GIT_BRANCH}
                rm -rf ../mern-service
            """
        }
        success {
            sh "curl -s -X POST https://api.telegram.org/bot${BOT_TOKEN}/sendMessage -d chat_id=${GROUP_ID} -d 'parse_mode=HTML' -d text='Hello Success!'"
        }
        failure {
            sh "curl -s -X POST https://api.telegram.org/bot${BOT_TOKEN}/sendMessage -d chat_id=${GROUP_ID} -d 'parse_mode=HTML' -d text='Hello Failure!'"
        }
    }
}